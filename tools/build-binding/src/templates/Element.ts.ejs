import PropTypes from 'prop-types';
import Gtk from '../gtk';
import Element from './Element';

export default class <%= klass.name %> extends Element {<% if (propTypes.length) { %>
  static propTypes = {<% for (var i = 0; i < propTypes.length; i++) { var propType = propTypes[i]; %>
    <%= propType.name %>: PropTypes.<%= propType.type -%>
<% if (i < propTypes.length - 1) { %>,<% }} %>
  };<% } %><% if (propTypes.length) { %>

  static defaultProps = {<% for (var i = 0; i < propTypes.length; i++) { var propType = propTypes[i]; %>
    <%= propType.name %>: null<% -%>
<% if (i < propTypes.length - 1) { %>,<% }} %>
  };<% } %>

  constructor(props = {}) {
    super(new Gtk.<%= klass.name %>(), props, { isContainer: true });
  }<% if (methods.length) { %>
<% for (var i = 0; i < methods.length; i++) { var method = methods[i]; %>
  <%= method.name %>(<% -%>
<% for (var i = 0; i < method.parameters.length; i++) { var parameter = method.parameters[i]; -%>
<%= parameter.name %>: <%= parameter.type -%>
<% if (i < method.parameters.length - 1) { %>, <% }} %>): <%= method.returnType %> {
    this.node.<%= method.name %>(<% -%>
<% for (var i = 0; i < method.parameters.length; i++) { var parameter = method.parameters[i]; -%>
<%= parameter.name -%>
<% if (i < method.parameters.length - 1) { %>, <% }} %>) {
  }<% }} %>
}
